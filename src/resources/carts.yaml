get:
  summary: "Get the cart of the user passed in the path"
  operationId: getUserCart
  description: "Retrieve all the information about a given user's cart"
  tags:
    - carts
  parameters:
    - $ref: "../parameters/path/userId.yaml"
    - $ref: "../parameters/query/field.yaml"
    - $ref: "../parameters/query/filter.yaml"
    - $ref: "../parameters/query/order.yaml"
    - $ref: "../parameters/query/sort.yaml"
  security:
    - bearerAuth: []
  responses:
    "200":
      description: "Expected response to a valid request"
      content:
        application/json:
          schema:
            $ref: "../schemas/Cart.yaml"
    "304":
      $ref: "../responses/NotModified.yaml"
    "401":
      $ref: "../responses/NotAuthorized.yaml"
    "403":
      $ref: "../responses/Forbidden.yaml"
    "404":
      $ref: "../responses/NotFound.yaml"
    "429":
      $ref: "../responses/TooManyRequest.yaml"
    default:
      $ref: "../responses/UnexpectedError.yaml"
post:
  summary: "Add a item to the cart"
  operationId: addFoodToCart
  description: "Add a food item to the cart of the user passed in the path"
  tags:
    - carts
  parameters:
    - $ref: "../parameters/path/userId.yaml"
  security:
    - bearerAuth: []
  requestBody:
    $ref: "../requestBody/cartItem.yaml"
  responses:
    "201":
      description: "The food item has been added to the cart"
      content:
        application/json:
          schema:
            $ref: "../schemas/Cart.yaml"
    "400":
      $ref: "../responses/BadRequest.yaml"
    "401":
      $ref: "../responses/NotAuthorized.yaml"
    "403":
      $ref: "../responses/Forbidden.yaml"
    "404":
      $ref: "../responses/NotFound.yaml"
    "429":
      $ref: "../responses/TooManyRequest.yaml"
    default:
      $ref: "../responses/UnexpectedError.yaml"
put:
  summary: "Update or create the cart of the user passed in the path"
  operationId: updateUserCart
  description: |
    Update or create the cart of the user passed in the path and return the updated cart.
    If an item does not exist, it will be created.
    If an item exists, it will be updated.
    If an item is not present (anymore) in the list, it will be deleted.
  tags:
    - carts
  parameters:
    - $ref: "../parameters/path/userId.yaml"
  security:
    - bearerAuth: []
  requestBody:
    $ref: "../requestBody/updateCart.yaml"
  responses:
    "200":
      description: "The cart was updated"
      content:
        application/json:
          schema:
            $ref: "../schemas/Cart.yaml"
    "304":
      $ref: "../responses/NotModified.yaml"
    "400":
      $ref: "../responses/BadRequest.yaml"
    "401":
      $ref: "../responses/NotAuthorized.yaml"
    "403":
      $ref: "../responses/Forbidden.yaml"
    "404":
      $ref: "../responses/NotFound.yaml"
    "422":
      $ref: "../responses/ValidationFailed.yaml"
    "429":
      $ref: "../responses/TooManyRequest.yaml"
    default:
      $ref: "../responses/UnexpectedError.yaml"
delete:
  summary: "Empty the cart of a user"
  operationId: emptyUserCart
  description: "Delete the cart of the user with the specified ID"
  tags:
    - carts
  parameters:
    - $ref: "../parameters/path/userId.yaml"
  security:
    - bearerAuth: []
  responses:
    "204":
      description: "Cart was emptied"
    "401":
      $ref: "../responses/NotAuthorized.yaml"
    "403":
      $ref: "../responses/Forbidden.yaml"
    "404":
      $ref: "../responses/NotFound.yaml"
    "429":
      $ref: "../responses/TooManyRequest.yaml"
    default:
      $ref: "../responses/UnexpectedError.yaml"
