openapi: 3.0.0
info:
  title: Uberoo API
  description: |
    To manage restaurants, menus, delivery people and orders with the Uberoo REST API
    You can find out more about Uberoo at [http://uberoo.eat](uberoo.eat).
  version: 1.0.0
  termsOfService: 'http://api.uberoo.eat/terms/'
  contact:
    name: Uberoo API Team
    email: apiteam@uberoo.eat
    url: 'https://api.uberoo.eat/contact/'
servers:
  - url: 'http://localhost:8000'
    description: Local server
  - url: 'http://api-sandbox.uberoo.eat'
    description: Sandbox server
  - url: 'http://api-staging.uberoo.eat'
    description: Staging server
  - url: 'https://api.uberoo.eat'
    description: Production server
tags:
  - name: restaurants
    description: Manage restaurants
  - name: foods
    description: Manage foods and menus of restaurants
  - name: carts
    description: Manage carts / baskets of customers
  - name: orders
    description: Manage orders of customers
paths:
  /restaurants:
    get:
      summary: List all restaurants
      operationId: getRestaurants
      description: Retrieve all the information about all the restaurants
      tags:
        - restaurants
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/field'
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: A list of restaurants
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
              description: Request limit per hour.
              example: 60
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: The number of requests left for the time window.
              example: 59
            X-RateLimit-Reset:
              schema:
                type: string
                format: date-time
              description: The UTC date/time at which the current rate limit window resets.
              example: '2020-01-01T00:00:00Z'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'
                  pagination:
                    type: object
                    properties:
                      endCursor:
                        type: string
                        example: ''
                      hasNextPage:
                        type: boolean
                        example: false
        '204':
          description: No restaurants found
          headers:
            $ref: '#/paths/~1restaurants/get/responses/200/headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: No Restaurants found
                code: 204
                details: The query was successful but no restaurants were found
        '205':
          description: Partial list of restaurants
          headers:
            $ref: '#/paths/~1restaurants/get/responses/200/headers'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'
                  pagination:
                    type: object
                    properties:
                      endCursor:
                        type: string
                        example: YXJyYXljb25uZWN0aW9uOjE=
                      hasNextPage:
                        type: boolean
                        example: true
        '304':
          $ref: '#/components/responses/NotModified'
        '400':
          description: Bad request
          headers:
            $ref: '#/paths/~1restaurants/get/responses/200/headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Bad Request
                code: 400
                details: The request was malformed
        '429':
          $ref: '#/components/responses/TooManyRequest'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create a new restaurant
      operationId: createRestaurant
      description: Create a new restaurant. The restaurant will not be returned in the response
      tags:
        - restaurants
      security:
        - bearerAuth: []
      requestBody:
        description: Restaurant object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: The id of the restaurant
                  type: string
                  nullable: false
                  example: 507f1f77bcf86cd799919011
                name:
                  description: The name of the restaurant
                  type: string
                  nullable: false
                  example: Le Cinq
                tag:
                  description: A list of tag of the restaurant
                  type: array
                  items:
                    type: string
                  example:
                    - gastronomy
                    - french
                openingHours:
                  description: The opening hours of the restaurant
                  type: array
                  items:
                    description: 'Format day:hour with 0 for monday and 0,23 for hours'
                    type: string
                  minItems: 0
                  maxItems: 168
                  example:
                    - '1:11'
                    - '1:12'
                    - '1:13'
                    - '1:14'
              required:
                - id
                - name
                - openingHours
                - address
      responses:
        '201':
          description: Restaurant was created
          headers:
            $ref: '#/paths/~1restaurants/get/responses/200/headers'
        '400':
          description: Bad request
          headers:
            $ref: '#/paths/~1restaurants/get/responses/200/headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Bad Request
                code: 400
                details: 'The request was malformed, please check the request body reference and example. The request body should be a valid JSON'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequest'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/restaurants/{restaurantId}':
    get:
      summary: Get a restaurant
      operationId: getRestaurant
      description: Retrieve all the information about a given restaurant by its id
      tags:
        - restaurants
      parameters:
        - $ref: '#/components/parameters/restaurantId'
      responses:
        '200':
          description: Expected response to a valid request
          headers:
            $ref: '#/paths/~1restaurants/get/responses/200/headers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '304':
          $ref: '#/components/responses/NotModified'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequest'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete a restaurant
      operationId: deleteRestaurant
      description: Deletes the restaurant with the specified ID
      tags:
        - restaurants
      parameters:
        - $ref: '#/components/parameters/restaurantId'
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Restaurant was deleted
          headers:
            $ref: '#/paths/~1restaurants/get/responses/200/headers'
        '304':
          $ref: '#/components/responses/NotModified'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationFailed'
        '429':
          $ref: '#/components/responses/TooManyRequest'
        default:
          $ref: '#/components/responses/UnexpectedError'
components:
  parameters:
    restaurantId:
      name: restaurantId
      in: path
      required: true
      example: 62f1l77bcf86cd799439011
      description: The id of the restaurant to retrieve
      schema:
        type: string
    userId:
      name: userId
      in: path
      required: true
      example: 68f1l77bcf86cd799439011
      description: The id of the user to retrieve
      schema:
        type: string
    offset:
      name: offset
      in: query
      description: The offset of returned data
      required: false
      schema:
        type: string
        example: YXJyYXljb25uZWN0aW9uOjE
    limit:
      name: limit
      in: query
      description: The numbers of items to return
      required: true
      schema:
        type: integer
        format: int32
        default: 50
        minimum: 1
        maximum: 100
    order:
      name: order
      in: query
      description: The order of returned data (asc or desc)
      required: false
      schema:
        type: string
        default: asc
        enum:
          - asc
          - desc
    sort:
      name: sort
      in: query
      description: Returned data sort
      required: false
      schema:
        type: string
        default: id
    field:
      name: fields
      in: query
      description: The fields to return
      required: false
      schema:
        type: array
        example:
          - id
        items:
          type: string
    filter:
      name: filter
      in: query
      required: false
      description: |
        The filter to apply to the data (e.g. 'name:John'). We can use :
        - 'or' operator to combine filters (e.g. 'name:John or name:Doe').
        - 'and' operator to combine filters (e.g. 'name:Doe and firstname:John').
        - '\*' wildcard operator to match any string (e.g. 'name:John\*' will match 'John' and 'John Doe')
      schema:
        type: string
        example: 'name:John'
        minLength: 3
        maxLength: 255
  schemas:
    Restaurant:
      allOf:
        - $ref: '#/paths/~1restaurants/post/requestBody/content/application~1json/schema'
        - type: object
          properties:
            address:
              $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        id:
          description: The id of the address
          type: string
          nullable: false
          example: 507f1f77bcf86cd799439011
        number:
          description: The address number
          type: integer
          format: int32
          nullable: true
          example: 5
        street:
          description: The address street
          type: string
          nullable: false
          example: Rue Charlot
        city:
          description: The address city
          type: string
          nullable: false
          example: Paris
        postalCode:
          description: The address postal code
          type: integer
          format: int32
          nullable: false
          example: 75003
        state:
          description: The address state
          type: string
          nullable: true
          example: Île-de-France
        country:
          description: The address country
          type: string
          nullable: false
          example: France
      required:
        - id
        - number
        - street
        - city
        - postalCode
        - country
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          nullable: false
          example: 500
        message:
          type: string
          nullable: false
          example: Internal Server Error
        details:
          type: string
          nullable: true
          example: 'Something went wrong, please try again later'
      required:
        - code
        - message
  responses:
    NotAuthorized:
      description: Requires authentication
      headers:
        $ref: '#/paths/~1restaurants/get/responses/200/headers'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Authentication required
            code: 401
            details: You must be authenticated to access this resource
    Forbidden:
      description: Forbidden
      headers:
        $ref: '#/paths/~1restaurants/get/responses/200/headers'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Forbidden
            code: 403
            details: 'You are not allowed to access this resource, please contact the administrator.'
    NotFound:
      description: Ressource not found
      headers:
        $ref: '#/paths/~1restaurants/get/responses/200/headers'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Ressource not found
            code: 404
            details: The ressource you are looking for could not be found
    NotModified:
      description: Not modified
      headers:
        $ref: '#/paths/~1restaurants/get/responses/200/headers'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Not Modified
            code: 304
            details: The requested resource has not been modified since the last request and we use the cached version of the resource
    TooManyRequest:
      description: Too many requests
      headers:
        $ref: '#/paths/~1restaurants/get/responses/200/headers'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Too Many Requests
            code: 429
            details: You have made too many requests to the server. Please try again later
    ValidationFailed:
      description: Validation failed
      headers:
        $ref: '#/paths/~1restaurants/get/responses/200/headers'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Validation failed
            code: 422
            details: The request was successfully constituted but could not be processed due to semantic errors.
    UnexpectedError:
      description: Unexpected error
      headers:
        $ref: '#/paths/~1restaurants/get/responses/200/headers'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Internal Server Error
            code: 500
            details: 'Something went wrong, please try again later'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
